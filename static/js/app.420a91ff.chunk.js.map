{"version":3,"sources":["color.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","isEditing","setIsEditing","selected","setSelected","editInput","useRef","useEffect","loadToDos","loadPrevious","console","log","a","async","AsyncStorage","getItem","onChangeText","payload","saveToDos","toSave","setItem","JSON","stringify","s","parse","editToDo","key","newToDos","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","marginTop","padding","TextInput","ref","onSubmitEditing","Date","now","finished","returnKeyType","value","input","toDo","rowView","autoFocus","borderBottomColor","ScrollView","Object","keys","map","marginRight","finishToDo","Fontisto","name","size","toDoTextFinished","toDoText","Foundation","marginLeft","Platform","OS","confirm","Alert","alert","deleteToDo","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","textDecorationLine","textDecorationColor"],"mappings":"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","file":"static/js/app.420a91ff.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  gray: \"#3A3D40\",\r\n  toDoBg: \"#5C5C60\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TouchableHighlight,\n  TouchableWithoutFeedback,\n  Pressable,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto, Foundation } from \"@expo/vector-icons\";\nimport { theme } from \"./color\";\n\nconst STORAGE_KEY = \"@toDos\";\nconst PREVIOUS = \"@current\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  const [isEditing, setIsEditing] = useState(false);\n  const [selected, setSelected] = useState(\"\");\n  const editInput = useRef();\n\n  useEffect(() => {\n    loadToDos();\n    loadPrevious();\n    console.log(toDos);\n  }, [isEditing]);\n\n  const travel = async () => {\n    setWorking(false);\n    await AsyncStorage.setItem(PREVIOUS, \"travel\");\n  };\n  const work = async () => {\n    setWorking(true);\n    await AsyncStorage.setItem(PREVIOUS, \"work\");\n  };\n\n  const loadPrevious = async () => {\n    const p = await AsyncStorage.getItem(PREVIOUS);\n    if (p === \"work\") {\n      await setWorking(true);\n    } else {\n      await setWorking(false);\n    }\n  };\n\n  const onChangeText = (payload) => setText(payload);\n\n  const saveToDos = async (toSave) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s) {\n      setToDos(JSON.parse(s));\n    }\n  };\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working, finished: false },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  const deleteToDo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        await saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do?\", \"Are you sure?\", [\n        {\n          text: \"Cancel\",\n        },\n        {\n          text: \"Yes\",\n          style: \"destructive\",\n          onPress: async () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            await saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n  const finishToDo = async (key) => {\n    const newToDos = { ...toDos };\n    newToDos[key].finished = !newToDos[key].finished;\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n  };\n  const editToDo = async (key, text) => {\n    const newToDos = { ...toDos };\n    newToDos[key].text = text;\n    setToDos(newToDos);\n    setText(\"\");\n    await saveToDos(newToDos);\n    await setIsEditing(false);\n  };\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: \"white\",\n              color: working ? \"white\" : theme.gray,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: \"white\",\n              color: working ? theme.gray : \"white\",\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n        {/* <TouchableHighlight\n          underlayColor=\"#DDDDDD\"\n          activeOpacity={0}\n          onPress={() => console.log(\"dsdfd\")}\n        >\n          <Text style={styles.btnText}>Travel</Text>\n        </TouchableHighlight> */}\n        {/* <Pressable>\n          <Text style={styles.btnText}>Travel</Text>\n        </Pressable> */}\n      </View>\n      {isEditing ? (\n        <Text\n          style={{ fontSize: 40, color: \"white\", marginTop: 20, padding: 10 }}\n        >\n          Now Editing...\n        </Text>\n      ) : (\n        <TextInput\n          ref={editInput}\n          onSubmitEditing={addToDo}\n          returnKeyType=\"done\"\n          onChangeText={onChangeText}\n          value={text}\n          style={styles.input}\n        />\n      )}\n      {isEditing ? (\n        <View style={styles.toDo} key={selected}>\n          <View style={styles.rowView}>\n            <TextInput\n              onSubmitEditing={() => editToDo(selected, text)}\n              returnKeyType=\"done\"\n              // secureTextEntry=flase\n              // keyboardType=\"number-pad\"\n              // multiline\n              // placeholderTextColor=\"red\"\n              // autoCorrect\n              // autoCapitalize={\"sentences\"}\n              autoFocus\n              onChangeText={onChangeText}\n              value={text}\n              style={{ fontSize: 18, borderBottomColor: \"white\" }}\n            ></TextInput>\n          </View>\n          <View>\n            <TouchableOpacity onPress={() => editToDo(selected, text)}>\n              <Text style={{ fontWeight: \"600\", fontSize: 20 }}>Done</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      ) : (\n        <ScrollView>\n          {Object.keys(toDos).map((key) =>\n            toDos[key].working === working ? (\n              <View style={styles.toDo} key={key}>\n                <View style={styles.rowView}>\n                  <TouchableOpacity\n                    style={{ marginRight: 10 }}\n                    onPress={() => finishToDo(key)}\n                  >\n                    <Fontisto\n                      name={\n                        toDos[key].finished\n                          ? \"checkbox-active\"\n                          : \"checkbox-passive\"\n                      }\n                      size={18}\n                      color=\"black\"\n                    />\n                  </TouchableOpacity>\n                  <Text\n                    style={\n                      toDos[key].finished\n                        ? styles.toDoTextFinished\n                        : styles.toDoText\n                    }\n                  >\n                    {toDos[key].text}\n                  </Text>\n                </View>\n                <View style={styles.rowView}>\n                  <TouchableOpacity\n                    onPress={async () => {\n                      setIsEditing(true);\n                      setSelected(key);\n                      setText(toDos[key].text);\n                    }}\n                  >\n                    <Foundation\n                      name=\"pencil\"\n                      size={22}\n                      color={theme.gray}\n                      finished={toDos[key].finished}\n                    />\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    style={{ marginLeft: 15 }}\n                    onPress={() => deleteToDo(key)}\n                  >\n                    <Fontisto\n                      name=\"trash\"\n                      size={18}\n                      color={theme.gray}\n                      finished={toDos[key].finished}\n                    />\n                  </TouchableOpacity>\n                </View>\n              </View>\n            ) : null\n          )}\n        </ScrollView>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 40,\n    borderRadius: 30,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  rowView: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 20,\n    fontWeight: \"500\",\n  },\n  toDoTextFinished: {\n    textDecorationLine: \"line-through\",\n    textDecorationColor: theme.gray,\n    color: theme.gray,\n    fontSize: 20,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}